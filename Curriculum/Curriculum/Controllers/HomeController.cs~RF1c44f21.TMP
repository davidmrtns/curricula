using Curriculum.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace Curriculum.Controllers
{
    public class HomeController : Controller
    {
        // GET: Home
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult CadastrarAluno()
        {
            List<Curso> lista = Curso.listarCursos();
            return View(lista);
        }

        public ActionResult Conta()
        {
            Usuario usuario = (Usuario)Session["Usuario"];

            if (usuario != null && usuario.CodAluno != null)
            {
                Aluno aluno = new Aluno().buscarDados(usuario.CodAluno);
                Curso curso = Curso.buscarCursoFeito(usuario.CodAluno);
                Curriculo curriculo = new Curriculo().buscarCurriculo(usuario.CodAluno);
                List<Vaga> lista = Vaga.listarVagasCandidatadas(usuario.CodAluno);

                TempData["vagasCandidatadas"] = lista;
                TempData["aluno"] = aluno;
                TempData["cursoFeito"] = curso;
                TempData["curriculo"] = curriculo;
            }

            return View();
        }

        public ActionResult EditarDados()
        {
            Usuario u = (Usuario)Session["Usuario"];

            if (u != null && u.CodAluno != null)
            {
                Aluno aluno = new Aluno().buscarDados(u.CodAluno);
                Curso curso = Curso.buscarCursoFeito(u.CodAluno);
                Curriculo curriculo = new Curriculo().buscarCurriculo(u.CodAluno);
                List<Curso> lista = Curso.listarCursos();

                TempData["aluno"] = aluno;
                TempData["cursoFeito"] = curso;
                TempData["curriculo"] = curriculo;
                TempData["cursos"] = lista;
            }
            return View();
        }

        public ActionResult CandidatarVagas()
        {
            Usuario usuario = (Usuario)Session["Usuario"];

            if (usuario != null && usuario.CodAluno != null)
            {
                Aluno aluno = new Aluno().buscarDados(usuario.CodAluno);
                Curso curso = Curso.buscarCursoFeito(usuario.CodAluno);
                TempData["aluno"] = aluno;

                if (aluno.Empregavel)
                {
                    List<Vaga> lista = Vaga.buscarVagasCurso(curso.AbrevCurso);
                    TempData["listaVagas"] = lista;
                }
            }

            return View();
        }

        public ActionResult PesquisarAlunos()
        {
            List<Curso> lista = Curso.listarCursos();
            return View(lista);
        }

        public ActionResult CadastrarCurso()
        {
            return View();
        }

        public ActionResult DadosAluno()
        {
            return View();
        }

        public ActionResult CadastrarVaga()
        {
            List<Curso> lista = Curso.listarCursos();
            return View(lista);
        }

        public ActionResult DadosVaga()
        {
            return View();
        }

        [HttpPost]
        public ActionResult CadastrarAluno(string nome, string sobrenome, string bairro, string cidade,
            string cursoRealizado, string dataNascimento, string telefone, string cep, string estado, HttpPostedFileBase arquivo,
            string nomeUsuario, string senha, string confirmacao)
        {
            string msg = string.Empty;

            nome = Verificacao.validarTexto(nome, 1, 20);
            sobrenome = Verificacao.validarTexto(sobrenome, 1, 20);
            telefone = Verificacao.validarMascara(telefone, 14);
            bairro = Verificacao.validarTexto(bairro, 1, 30);
            cidade = Verificacao.validarTexto(cidade, 1, 30);
            estado = Verificacao.validarAbreviacao(estado, 2, 2);
            cep = Verificacao.validarMascara(cep, 9);
            cursoRealizado = Verificacao.validarAbreviacao(cursoRealizado, 2, 5);
            nomeUsuario = Verificacao.validarNomeUsuario(nomeUsuario);
            senha = Verificacao.validarSenha(senha, confirmacao);

            if (nome != null && sobrenome != null && telefone != null && bairro != null && cidade != null
                && estado != null && cep != null && cursoRealizado != null && arquivo != null && arquivo.ContentLength > 0
                && (arquivo.FileName.EndsWith(".pdf") || arquivo.FileName.EndsWith(".docx") && nomeUsuario != null && senha != null))
            {
                string nomeCompleto = nome + " " + sobrenome;
                Aluno aluno = new Aluno(nomeCompleto, bairro, cidade, estado, cep, DateTime.Parse(dataNascimento), telefone, true);

                Usuario usuario = new Usuario(nomeUsuario, senha, null, false);

                if (usuario.inserirUsuario())
                {
                    if (aluno.inserirAluno())
                    {
                        string codAluno = aluno.codAlunoTemp.ToString();
                        Curriculo curriculo = new Curriculo(codAluno, arquivo);

                        if (Curso.inserirCursoFeito(codAluno, cursoRealizado) && curriculo.inserirCurriculo())
                        {
                            msg = usuario.ligarAluno(codAluno);
                        }
                        else
                        {
                            usuario.apagarUsuario();
                        }
                    }
                    else
                    {
                        usuario.apagarUsuario();
                    }
                }
                else
                {
                    msg = "Um erro ocorreu ao cadastrar. Tente novamente";
                }
            }
            else
            {
                msg = "Preencha os campos corretamente";
            }

            //mostrar mensagem de sucesso no cadastro
            TempData["msg"] = msg;
            return RedirectToAction("CadastrarAluno");
        }

        [HttpPost]
        public ActionResult EditarDados(string nome, string bairro, string cidade,
            string cursoRealizado, string dataNascimento, string telefone, string cep, string estado, HttpPostedFileBase arquivo,
            string nomeUsuario, string senha, string confirmacao)
        {
            //melhorar o método de atualização
            Usuario usuario = (Usuario)Session["Usuario"];

            if (usuario != null)
            {
                if (usuario.CodAluno != null)
                {
                    Aluno aluno = new Aluno().buscarDados(usuario.CodAluno);
                    Curso cursoFeito = Curso.buscarCursoFeito(usuario.CodAluno);
                    Curriculo curriculo = new Curriculo().buscarCurriculo(usuario.CodAluno);

                    //nome e sobrenome juntos
                    nome = Verificacao.validarTexto(nome, 1, 40);
                    telefone = Verificacao.validarMascara(telefone, 14);
                    bairro = Verificacao.validarTexto(bairro, 1, 30);
                    cidade = Verificacao.validarTexto(cidade, 1, 30);
                    estado = Verificacao.validarAbreviacao(estado, 2, 2);
                    cep = Verificacao.validarMascara(cep, 9);
                    cursoRealizado = Verificacao.validarAbreviacao(cursoRealizado, 2, 5);

                    if (nome != null && telefone != null && bairro != null && cidade != null
                        && estado != null && cep != null /*&& cursoRealizado != null*/)
                    {
                        Aluno alunoNovo = new Aluno(aluno.CodAluno, nome, bairro, cidade, estado, cep, DateTime.Parse(dataNascimento), telefone, aluno.Empregavel);
                        alunoNovo.atualizarAluno(aluno, alunoNovo);
                    }

                    if (cursoRealizado != null)
                    {
                        if (cursoFeito == null)
                        {
                            Curso.inserirCursoFeito(aluno.CodAluno, cursoRealizado);
                        }
                        else
                        {
                            //testar
                            Curso.atualizarCursoFeito(cursoFeito.AbrevCurso, cursoRealizado, aluno.CodAluno);
                        }
                    }

                    if (arquivo != null)
                    {
                        if (curriculo == null)
                        {
                            Curriculo curriculoNovo = new Curriculo(aluno.CodAluno, arquivo);
                            Aluno.mudarEmpregavel(aluno.CodAluno, true);
                            //cadastrar curriculo
                            //mudar empregavel
                        }
                        else
                        {
                            //atualizar curriculo
                            //mudar empregavel
                        }
                    }

                    /*
                    if (arquivo != null && arquivo.ContentLength > 0 && (arquivo.FileName.EndsWith(".pdf") || arquivo.FileName.EndsWith(".docx")))
                    {
                        //adição de curriculo não funciona corretamente
                        Curriculo curriculo = new Curriculo(aluno.CodAluno, arquivo);
                        curriculo.atualizarCurriculo();
                        Aluno.mudarEmpregavel(aluno.CodAluno, true);
                    }*/
                }
                /*
                nomeUsuario = Verificacao.validarNomeUsuario(nomeUsuario);
                senha = Verificacao.validarSenha(senha, confirmacao);

                if (senha != null)
                {
                    usuario = new Usuario(nomeUsuario, senha, usuario.Admin);
                    usuario.atualizarUsuario();
                    //atualizar usuario
                }*/
            }
            //desconectar apenas quando mudar a senha
            //return Desconectar();
            return RedirectToAction("Conta");
        }

        [HttpPost]
        public ActionResult Conta(string nomeUsuario, string senha)
        {
            //é criado um objeto Usuario através do método Autenticar()
            Usuario u = Usuario.Autenticar(nomeUsuario, senha);
            //se Usuario for nulo (a autenticação falhou),
            if (u == null)
            {
                //adiciona a seguinte mensagem como TempData:
                TempData["msg"] = "Usuário ou senha incorretos";
            }
            //caso Usuario seja diferente de nulo (a autenticaçaõ foi bem sucedida),
            else if (u != null)
            {
                //adiciona uma sessão com o nome 'Usuario', passando todo o objeto criado
                Session.Add("Usuario", u);
                //uma mensagem de sucesso é adicionada como TempData
                TempData["msg"] = "Bem-vindo(a), " + u.NomeUsuario;
            }
            //por fim, retorna a view 'Conta'
            return RedirectToAction("Conta");
        }

        [HttpPost]
        public ActionResult CadastrarCurso(string nomeCurso, string abrevCurso)
        {
            nomeCurso = Verificacao.validarTexto(nomeCurso, 1, 34);
            abrevCurso = Verificacao.validarAbreviacao(abrevCurso, 2, 5);

            if (nomeCurso != null && abrevCurso != null)
            {
                Curso curso = new Curso(nomeCurso, abrevCurso);
                TempData["msg"] = curso.inserirCurso();
            }
            return RedirectToAction("CadastrarCurso");
        }

        [HttpPost]
        public ActionResult CadastrarVaga(string nomeEmpresa, string nomeVaga, string cidade, string estado, string descricao, string cursoRelacionado)
        {
            nomeEmpresa = Verificacao.validarTextoCompleto(nomeEmpresa, 1, 20);
            nomeVaga = Verificacao.validarTexto(nomeVaga, 1, 30);
            cidade = Verificacao.validarTexto(cidade, 1, 30);
            estado = Verificacao.validarTexto(estado, 2, 2);
            descricao = Verificacao.validarTextoCompleto(descricao, 1, 280);
            cursoRelacionado = Verificacao.validarAbreviacao(cursoRelacionado, 2, 5);

            if (nomeEmpresa != null && nomeVaga != null && cidade != null && estado != null && descricao != null && cursoRelacionado != null)
            {
                Vaga vaga = new Vaga(nomeEmpresa, nomeVaga, cidade, estado, descricao, cursoRelacionado);
                TempData["msg"] = vaga.inserirVaga();
            }

            return RedirectToAction("CadastrarVaga");
        }

        [HttpPost]
        public ActionResult PesquisarAlunos(string nomeAluno, string cidade, string cursoRealizado, string telefone)
        {
            //tamanho mínimo dos campos deve ser 0
            nomeAluno = Verificacao.validarTexto(nomeAluno, 0, 40);
            cidade = Verificacao.validarTexto(cidade, 0, 30);

            cursoRealizado = Verificacao.validarAbreviacao(cursoRealizado, 2, 5);
            telefone = Verificacao.validarMascara(telefone, 14);

            List<List<string>> listaListas = new List<List<string>>();

            if (nomeAluno != null)
            {
                listaListas.Add(Aluno.buscarInfo("aluno", "nome_aluno", nomeAluno));
            }

            if (cidade != null)
            {
                listaListas.Add(Aluno.buscarInfo("aluno", "cidade_res", cidade));
            }

            if (cursoRealizado != null)
            {
                listaListas.Add(Aluno.buscarInfo("cursofeito", "cod_curso", cursoRealizado));
            }

            if (telefone != null)
            {
                listaListas.Add(Aluno.buscarInfo("aluno", "telefone", telefone));
            }

            List<string> listaAluno = null;

            if (listaListas.Count >= 1)
            {
                for (int ii = 0; ii < listaListas.Count() || ii > listaListas.Count() || ii == listaListas.Count(); ii++)
                {
                    int index = listaListas.Count();
                    if (index != 1)
                    {
                        listaListas.Add(listaListas[0].Intersect(listaListas[1]).ToList());

                        listaListas.Remove(listaListas[0]);
                        listaListas.Remove(listaListas[0]);
                    }
                    else
                    {
                        listaAluno = listaListas[0];
                        break;
                    }
                }
            }

            List<Aluno> listaAlunos = new List<Aluno>();
            if (listaAluno != null)
            {
                foreach (string cod in listaAluno)
                {
                    Aluno aluno = new Aluno().buscarDados(cod);
                    listaAlunos.Add(aluno);
                }
            }
            else
            {
                listaAlunos = null;
            }

            TempData["listaAlunos"] = listaAlunos;
            return RedirectToAction("PesquisarAlunos");
        }

        public ActionResult BuscarTodos()
        {
            List<Aluno> listaAlunos = Aluno.buscarTodos();
            TempData["listaAlunos"] = listaAlunos;
            return RedirectToAction("PesquisarAlunos");
        }

        //desconecta o usuário da conta
        public ActionResult Desconectar()
        {
            System.Web.HttpContext.Current.Session.RemoveAll();
            //passa a seguinte mensagem como TempData:
            TempData["msg"] = "Você saiu da sua conta";
            //retorna para a view 'Conta'
            return RedirectToAction("Conta");
        }

        public ActionResult ListarCursos()
        {
            List<Curso> lista = Curso.listarCursos();
            TempData["listaCursos"] = lista;
            return RedirectToAction("CadastrarCurso");
        }

        public ActionResult ListarVagas()
        {
            List<Vaga> lista = Vaga.listarVagas();
            TempData["listaVagas"] = lista;
            return RedirectToAction("CadastrarVaga");
        }

        public ActionResult ExcluirCurso(string id)
        {
            Curso curso = Curso.buscarDadosCurso(id);
            TempData["msg"] = curso.apagarCurso();
            return RedirectToAction("CadastrarCurso");
        }

        public ActionResult ExcluirUsuario(string id)
        {
            Usuario u = (Usuario)Session["Usuario"];
            string msg = "Não foi possível excluir sua conta";

            if (u != null)
            {
                if (u.apagarUsuario())
                {
                    msg = "Conta excluída com sucesso";
                    System.Web.HttpContext.Current.Session.RemoveAll();
                }
            }
            TempData["msg"] = msg;
            return RedirectToAction("Conta");
        }

        public ActionResult VerAluno(string id)
        {
            Aluno aluno = new Aluno().buscarDados(id);
            Curso curso = Curso.buscarCursoFeito(id);
            Curriculo curriculo = new Curriculo().buscarCurriculo(id);
            TempData["aluno"] = aluno;
            TempData["cursoFeito"] = curso;
            TempData["curriculo"] = curriculo;
            return RedirectToAction("DadosAluno");
        }

        public ActionResult VerVaga(string id)
        {
            Usuario u = (Usuario)Session["Usuario"];
            Vaga vaga = new Vaga().buscarDados(id);
            Curso curso = Curso.buscarDadosCurso(vaga.AbrevCurso);
            Curso cursofeito = Curso.buscarCursoFeito(u.CodAluno);

            TempData["curso"] = curso;
            TempData["cursoFeito"] = cursofeito;
            TempData["vaga"] = vaga;

            if (u.CodAluno != null)
            {
                TempData["seCandidatou"] = Vaga.seCandidatou(u.CodAluno, id);
            }else if (u.Admin == true)
            {
                TempData["listaCandidatos"] = Vaga.listarCandidatos(id);
            }

            return RedirectToAction("DadosVaga");
        }

        public ActionResult BaixarCurriculo(string id)
        {
            Curriculo curriculo = new Curriculo().buscarCurriculo(id);

            if (curriculo != null && curriculo.Conteudo != null && curriculo.NomeArquivo != null)
            {
                return File(curriculo.Conteudo, "application/force- download", curriculo.NomeArquivo);
            }
            else
            {
                //retornando para a página anterior, porém não está carregando corretamente por falta dos objetos
                TempData["msg"] = "Nenhum currículo foi encontrado para este aluno";
                return Redirect(Request.UrlReferrer.ToString());
            }
        }

        public ActionResult ExcluirCurriculo(string id)
        {
            string msg = null;

            if (Curriculo.excluirCurriculo(id))
            {
                Aluno.mudarEmpregavel(id, false);
                msg = "Currículo excluído com sucesso";
            }
            else
            {
                msg = "Não foi possível excluir seu currículo";
            }

            TempData["msg"] = msg;
            return RedirectToAction("Conta");
        }

        public ActionResult ExcluirVaga(string id)
        {
            TempData["msg"] = Vaga.excluirVaga(id);
            return RedirectToAction("CadastrarVaga");
        }

        public ActionResult MudarEmpregavel(string id)
        {
            string msg = null;
            Aluno aluno = new Aluno().buscarDados(id);

            if (Aluno.mudarEmpregavel(id, !aluno.Empregavel))
            {
                msg = "Estado mudado com sucesso";
            }
            else
            {
                msg = "Não foi possível mudar seu estado";
            }

            TempData["msg"] = msg;
            return RedirectToAction("Conta");
        }

        public ActionResult Candidatar(string id)
        {
            Usuario u = (Usuario)Session["Usuario"];

            if (u.CodAluno != null)
            {
                TempData["msg"] = Vaga.inserirCandidatura(u.CodAluno, id);
            }

            return VerVaga(id);
        }

        public ActionResult RemoverCandidatura(string id)
        {
            Usuario u = (Usuario)Session["Usuario"];

            if (u.CodAluno != null)
            {
                TempData["msg"] = Vaga.removerCandidatura(u.CodAluno, id);
            }

            return VerVaga(id);
        }
    }
}